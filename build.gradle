import org.gradle.process.ExecResult

plugins {
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.node-gradle.node' version '3.5.1'
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
}

apply plugin: 'io.spring.dependency-management'

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
}

test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

node {
    version = '16.0.0'
    download = true

    workDir = file("${project.projectDir}/src/main/frontend/nodejs")
    npmWorkDir = file("${project.projectDir}/src/main/frontend/npm")
    nodeModulesDir = file("${project.projectDir}/src/main/frontend")
}

task npmInstallDependencies(type: NpmTask) {
    dependsOn 'npmSetup'
    execOverrides {
        it.ignoreExitValue = true
        it.workingDir = 'src/main/frontend'
    }
    args = ['install']
}

task npmBuild(type: NpmTask) {
    dependsOn 'npmInstallDependencies'
    execOverrides {
        it.workingDir = 'src/main/frontend'
    }
    args = ['run', 'build']
}

task copyFrontendToBuild(type: Copy) {
    dependsOn 'npmBuild'
    from "$projectDir/src/main/frontend/build"
    into "$buildDir/resources/main/static"
}

task npmStart(type: NpmTask) {
    dependsOn 'copyFrontendToBuild'
    workingDir = file('src/main/frontend')
    args = ['start', '--port', '3000']
}

processResources {
    dependsOn 'copyFrontendToBuild'
}

jar {
    manifest {
        attributes "Main-class": "software.engineering.main"
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}